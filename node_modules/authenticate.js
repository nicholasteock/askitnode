// authenticate.js
// Handles user login and new user registration

var crypto 	= require('crypto'),
	globals = require('globals'),
	utility = require('utilities'),
	async 	= require('async');

// Note to self:
// This function is purely for access token use.
function assignToken( params, callback ) {
	if( !params.accessToken || utility.isExpired(params.token_created, 10000) ) {
		var date = new Date(),
			hashObj = utility.generateHash( date.toString(), params.email ),
			queryString = "UPDATE user SET accessToken='" + hashObj.hash + "', salt='" + hashObj.salt + "' WHERE id=" + params.id;
		
		globals.pool.getConnection( function(err, connection) {
			connection.query(queryString, function(err, rows) {
				connection.release();
				if( err ) {
					callback( null, null );
				}
				else {
					callback( null, hashObj.hash );
				}
			});
		});
	}
}

var login = function( params, callback ) {
				var hashObj 	= 	utility.generateHash( params.email, params.password ),
					queryString =	'SELECT id, email, firstName, lastName, accessToken, token_created FROM user WHERE email = "'
									+ params.email + '" AND password = "' + hashObj.hash + '"';
				
				globals.pool.getConnection( function(err, connection) {
					connection.query( queryString, function( err, rows ) {
						var response = {};
						connection.release();
						if( err ) {
							response.result = "failure",
							response.error 	= "Query returned error";
						}
						else {
							if(rows.length === 0) {
								response.result = "failure";
								response.error 	= "Invalid login"
							}
							else {
								rows = rows[0];
								async.series([
									function( callback ) {
										assignToken( rows, callback );
									}
								], function(err, results) {
									if( !results ) {
										response.result = 'failure';
										response.error 	= 'Error inserting token.'
									}
									else {
										response.result = "success";
										rows.accessToken 	= results[0];
										response.data 		= rows;
									}
									callback(null, response);
								});
							}
						}
					});
				});
			};

var logout = function( params, callback ) {
				var queryString = "UPDATE user SET accessToken=NULL, token_created=NULL WHERE accessToken='" + params.accessToken + "'";

				globals.pool.getConnection( function(err, connection) {
					connection.query( queryString, function( err, rows ) {
						var response = {};
						connection.release();
						if( err ) {
							response.result = "failure";
							response.error 	= "Query returned error";
						}
						else {
							response.result = "success";
							if( rows.affectedRows === 0 ) {
								response.message = "Logout failed"
							}
							else {
								response.message = "Logout success"
							}
						}
						callback( null, response );
					});
				});
			};





module.exports = {
	login 	: login,
	logout 	: logout
};
